1.	In my opinion when you boot up a computer and start typing all the keys being pushed are being sent directly to the processor. That is the brain behind everything your computer does. Basically, your motherboard is the main hub that keeps everything together and your processor is the brain telling it what to do. When you type also some information might go to the hard drive which is where everything important is stored. If the hard drive were to be erased your computer would be an empty shell basically a very heavy paperweight. When you type you need all your hardware components to work. The ram is also important because the more you have the more it allows you to multitask especially with specialized software for the workforce. 
2.	Computers use input because they need data to perform tasks efficiently. If a program asks for input from a user, it means that it can perform a limited number of combinations. But also, it can help you automate work and different processes. Output also helps when you are entering data for equations or formulas. It can help you see any data that you might have missed. There are unlimited number of uses for these two sets of data that can help anyone improve their work.
3.	The term “infinitely reproducible nothings” means that anyone can make these programs. All you need is a computer to improve or create the new best thing. This will come at no cost to you and yet it can be worth millions of dollars in the future. This is what happened before with many programs. Of course, if the program is good someone might want to make their own version. If this happens, they can make it free or sell it and make money out of your original idea. There will always be a new program or something that can be improved. Everyone has different views and ideas that can change a program for the better or worse.
4.	For code to become a program there are several things that must happen first. Code are the instructions a compiler or reader must translate to become a program. Most of the compilers usually break up the code in smaller pieces sometimes called classes. After it reads it by parts it combines them or executes the code. Different programming languages have different processes but most of them have this basic concept to work.
5.	Algorithms are usually set instructions that work in conjunction with your code. These instructions are usually in place to help automate processes that usually take a lot of time for the user. They help with equations, formulas, and data processing.
6.	The DRY principle is usually to remind the user who is coding that it should be simple and not repeating. The whole point of coding is for you to make it easier for different users. If you can name or put a value on something once it should not have to change again. Unless you want it too. You can create functions to work for you and your code so that you do not have to go back and change things manually.
7.	Object oriented programming are usually languages that assign values and hold them or store so that each thing you reference will always be able to change. These different storage values can contain data or code and can also hold different attributes.
8.	Data is information that has not been processed yet. While code is already useful in its own because it holds a syntax and can be modified to improve or change any program. Data can be modified so that it turns into code, but it must be read by a compiler first. If anything is wrong or needs to be deleted the compiler will tell you what steps need to be done for the data to be useful. 
9.	A framework is usually a guide for what can be done with certain programs and how they can be built. Framework is usually something that can help you and show how different programs can relate. A framework is a platform that allows you to take control of all your programs.
10.	Debugging is something you can really enjoy or hate. It is the process of troubleshooting your code and finding the one mistake that is not allowing it to run. You can find the errors on your own or by trial and error. Most compilers now tell you exactly which code line is the one with the issue. It can be a simple typo or something that is not in the correct syntax. 
11.	With everything that I have learned coding seems like a perfect fit for me. I enjoy building puzzles and challenges. I want to learn how to build and improve existing software. I have a lot of great ideas that I don’t know how to implement yet, but I am hoping with my future knowledge I can build something really useful for everyone. I also want to leave a great example for my children. I want them to know that you are always going to need technology, especially in the future. It would help if everyone knew how to code because we could improve so many things.  I am also excited to code because it means working in groups and collaborating with people. I am always willing to learn from anybody. 
